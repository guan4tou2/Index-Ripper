name: Build Executables

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            output_name: IndexRipper_Windows.exe
            artifact_name: IndexRipper-Windows
          - os: macos-latest
            output_name: IndexRipper_MacOS.app
            artifact_name: IndexRipper-MacOS

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup macOS environment
        if: matrix.os == 'macos-latest'
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12"
          channels: conda-forge

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        shell: bash -l {0}
        run: |
          conda install -y tk

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          architecture: "x64"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Verify tkinter installation
          python -c "import tkinter; print('tkinter version:', tkinter.TkVersion)"
          # Install other dependencies
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Add tkinter to hidden imports
          pyinstaller --onefile --windowed --icon=app.ico --name=IndexRipper_Windows --hidden-import tkinter --hidden-import tkinter.ttk index_ripper.py

      - name: Build with PyInstaller (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Create .spec file for macOS app bundle
          echo 'from PyInstaller.building.api import PYZ, EXE, COLLECT
from PyInstaller.building.build_main import Analysis
block_cipher = None
a = Analysis(
    ["index_ripper.py"],
    pathex=[],
    binaries=[],
    datas=[],
    hiddenimports=["tkinter", "tkinter.ttk"],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)
pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name="IndexRipper_MacOS",
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=True,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,
)
app = BUNDLE(
    exe,
    name="IndexRipper_MacOS.app",
    icon=None,
    bundle_identifier="com.indexripper.app",
)' > IndexRipper_MacOS.spec

          # Build using the spec file
          pyinstaller IndexRipper_MacOS.spec

      - name: Test executable (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          if [ -d "dist/IndexRipper_MacOS.app" ] && [ -d "dist/IndexRipper_MacOS.app/Contents/MacOS" ]; then
            echo "App bundle created successfully"
            ls -la dist/IndexRipper_MacOS.app/Contents/MacOS/
          else
            echo "App bundle not found or incomplete"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.output_name }}

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Generate release tag
        id: tag
        run: |
          echo "release_tag=v$(date +'%Y.%m.%d_%H%M')" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag ${{ steps.tag.outputs.release_tag }}
          git push origin ${{ steps.tag.outputs.release_tag }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            dist/**/*
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: Release ${{ steps.tag.outputs.release_tag }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
