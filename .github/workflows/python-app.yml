name: Python application

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            output_name: index_ripper.exe
            tkinter_install: python -m pip install tk
          - os: macos-latest
            output_name: index_ripper
            tkinter_install: brew install python-tk@3.10
          - os: ubuntu-latest
            output_name: index_ripper
            tkinter_install: sudo apt-get install -y python3-tk

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          ${{ matrix.tkinter_install }}

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          ${{ matrix.tkinter_install }}

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: ${{ matrix.tkinter_install }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller pytest

      - name: Test with pytest
        run: |
          python -m pytest

      - name: Build executable
        run: |
          pyinstaller --onefile --windowed --name index_ripper index_ripper.py

      - name: Make executable (Unix)
        if: runner.os != 'Windows'
        run: chmod +x dist/${{ matrix.output_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: index-ripper-${{ runner.os }}
          path: dist/${{ matrix.output_name }}
          compression-level: 0 # 不壓縮二進制檔案
