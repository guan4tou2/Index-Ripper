name: Build Executables (uv + PyInstaller)

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-13, macos-14, ubuntu-latest]
        include:
          - os: windows-latest
            artifact_name: IndexRipper-Windows
            output_path: dist/IndexRipper.exe
          - os: macos-13
            artifact_name: IndexRipper-macOS-Intel
            output_path: dist/IndexRipper.app
          - os: macos-14
            artifact_name: IndexRipper-macOS-AppleSilicon
            output_path: dist/IndexRipper.app
          - os: ubuntu-latest
            artifact_name: IndexRipper-Linux
            output_path: dist/IndexRipper
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Setup conda (macOS & Linux)
        if: matrix.os != 'windows-latest'
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12"
          channels: conda-forge

      - name: Install tk (macOS & Linux)
        if: matrix.os != 'windows-latest'
        shell: bash -l {0}
        run: |
          conda install -y tk

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          uv pip install --system -r requirements.txt pyinstaller pillow

      - name: Install dependencies (macOS & Linux)
        if: matrix.os != 'windows-latest'
        shell: bash -l {0}
        run: |
          uv pip install --system -r requirements.txt pyinstaller pillow

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --windowed --icon=app.png --name=IndexRipper --hidden-import tkinter --hidden-import tkinter.ttk index_ripper.py

      - name: Build (macOS)
        if: startsWith(matrix.os, 'macos-')
        shell: bash -l {0}
        run: |
          pyinstaller -F --windowed --name=IndexRipper \
            --hidden-import tkinter --hidden-import tkinter.ttk --icon=app.png index_ripper.py
          [ -f dist/IndexRipper ] && rm -f dist/IndexRipper || true

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash -l {0}
        run: |
          pyinstaller --onefile --windowed --name=IndexRipper \
            --hidden-import tkinter --hidden-import tkinter.ttk --icon=app.png index_ripper.py

      - name: Verify artifact exists
        shell: bash
        run: |
          echo "Listing dist/:" && ls -la dist || true
          if [ -d "${{ matrix.output_path }}" ] || [ -f "${{ matrix.output_path }}" ]; then
            echo "Artifact exists: ${{ matrix.output_path }}"
          else
            echo "Artifact not found: ${{ matrix.output_path }}" && exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.output_path }}
          if-no-files-found: error

  release:
    name: Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: false

      - name: Ensure zip is available
        run: |
          sudo apt-get update -y
          sudo apt-get install -y zip

      - name: Zip macOS apps
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          (
            cd artifacts
            for dir in IndexRipper-macOS-*; do
              if [ -d "$dir/IndexRipper.app" ]; then
                zip_name="${dir}.app.zip"
                echo "Zipping $dir/IndexRipper.app -> $zip_name"
                zip -r -9 "$zip_name" "$dir/IndexRipper.app"
              fi
            done
          )

      - name: Normalize asset filenames
        shell: bash
        run: |
          set -euo pipefail
          if [ -f artifacts/IndexRipper-Windows/IndexRipper.exe ]; then
            mv artifacts/IndexRipper-Windows/IndexRipper.exe artifacts/IndexRipper-Windows.exe
          fi
          if [ -f artifacts/IndexRipper-Linux/IndexRipper ]; then
            mv artifacts/IndexRipper-Linux/IndexRipper artifacts/IndexRipper-Linux
          fi

      - name: List prepared files
        run: |
          echo "Artifacts tree:" && ls -laR artifacts || true
          echo "macOS zips:" && ls -la artifacts/*.app.zip || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/IndexRipper-Windows.exe
            artifacts/IndexRipper-Linux
            artifacts/IndexRipper-macOS-*.app.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
